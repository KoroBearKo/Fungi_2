// <auto-generated />
using System;
using BackendFungi.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackendFungi.Migrations
{
    [DbContext(typeof(FungiDbContext))]
    partial class FungiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackendFungi.Database.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("Articles_pkey");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Doppelganger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DoppelgangerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("MushroomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Doppelgangers_pkey");

                    b.HasIndex(new[] { "MushroomId" }, "fki_Doppelgangers_MushroomId_fkey");

                    b.ToTable("Doppelgangers");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Mushroom", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Eatable")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("HasStem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("RedBook")
                        .HasColumnType("boolean");

                    b.Property<string>("StemColor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("StemSizeFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("StemSizeTo")
                        .HasColumnType("integer");

                    b.Property<string>("StemType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SynonymousName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("Mushrooms_pkey");

                    b.ToTable("Mushrooms");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParagraphText")
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Paragraphs_pkey");

                    b.HasIndex(new[] { "ArticleId" }, "fki_Paragraphs_ArticleId_fkey");

                    b.ToTable("Paragraphs");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id")
                        .HasName("Roles_pkey");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.HasIndex(new[] { "RoleId" }, "fki_Users_RoleId_fkey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Doppelganger", b =>
                {
                    b.HasOne("BackendFungi.Database.Entities.Mushroom", "Mushroom")
                        .WithMany("Doppelgangers")
                        .HasForeignKey("MushroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Doppelgangers_MushroomId_fkey");

                    b.Navigation("Mushroom");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Paragraph", b =>
                {
                    b.HasOne("BackendFungi.Database.Entities.Article", "Article")
                        .WithMany("Paragraphs")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Paragraphs_ArticleId_fkey");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.User", b =>
                {
                    b.HasOne("BackendFungi.Database.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("Users_RoleId_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Article", b =>
                {
                    b.Navigation("Paragraphs");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Mushroom", b =>
                {
                    b.Navigation("Doppelgangers");
                });

            modelBuilder.Entity("BackendFungi.Database.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
